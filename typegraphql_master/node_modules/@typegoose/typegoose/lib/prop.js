"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const mongoose = require("mongoose");
const util_1 = require("util");
const constants_1 = require("./internal/constants");
const data_1 = require("./internal/data");
const errors_1 = require("./internal/errors");
const utils = require("./internal/utils");
const logSettings_1 = require("./logSettings");
const typegoose_1 = require("./typegoose");
const types_1 = require("./types");
/**
 * Base Function for prop & arrayProp
 * @param input All the options needed for prop's
 */
function baseProp(input) {
    const { Type, key, origOptions, target, whatis } = input;
    if (Type === target.constructor) { // prevent "infinite" buildSchema loop / Maximum Stack size exceeded
        throw new TypeError('It seems like the type used is the same as the target class, which is currently not supported\n'
            + `Please look at https://github.com/typegoose/typegoose/issues/42 for more information, for now please avoid using it!`);
    }
    const existingMapForTarget = Reflect.getOwnMetadata(constants_1.DecoratorKeys.PropCache, target);
    if (utils.isNullOrUndefined(existingMapForTarget)) {
        Reflect.defineMetadata(constants_1.DecoratorKeys.PropCache, new Map(), target);
    }
    const mapForTarget = (existingMapForTarget !== null && existingMapForTarget !== void 0 ? existingMapForTarget : Reflect.getOwnMetadata(constants_1.DecoratorKeys.PropCache, target));
    mapForTarget.set(key, { origOptions, Type, target, key, whatis });
    logSettings_1.logger.debug('Added "%s.%s" to the Decorator Cache', utils.getName(target.constructor), key);
}
/**
 * Function that is the actual processing of the prop's (used for caching)
 * @param input All the options needed for prop's
 */
function _buildPropMetadata(input) {
    var _a, _b, _c, _d, _e, _f, _g, _h, _j;
    let { Type } = input;
    const { key, origOptions, target, whatis } = input;
    const rawOptions = Object.assign({}, origOptions);
    logSettings_1.logger.debug('Starting to process "%s.%s"', utils.getName(target), key);
    if (!utils.isNullOrUndefined(rawOptions.type)) {
        logSettings_1.logger.info('Prop Option "type" is set to', rawOptions.type);
        Type = rawOptions.type;
        delete rawOptions.type;
    }
    if (utils.isNotDefined(Type)) {
        typegoose_1.buildSchema(Type);
    }
    const name = utils.getName(target);
    if (!data_1.virtuals.has(name)) {
        data_1.virtuals.set(name, new Map());
    }
    if (utils.isWithVirtualPOP(rawOptions)) {
        if (!utils.includesAllVirtualPOP(rawOptions)) {
            throw new errors_1.NotAllVPOPElementsError(name, key);
        }
        data_1.virtuals.get(name).set(key, rawOptions);
        return;
    }
    utils.initProperty(name, key, whatis);
    if (!utils.isNullOrUndefined(rawOptions.set) || !utils.isNullOrUndefined(rawOptions.get)) {
        if (typeof ((_a = rawOptions) === null || _a === void 0 ? void 0 : _a.set) !== 'function') {
            throw new TypeError(`"${name}.${key}" does not have a set function!`);
        }
        if (typeof ((_b = rawOptions) === null || _b === void 0 ? void 0 : _b.get) !== 'function') {
            throw new TypeError(`"${name}.${key}" does not have a get function!`);
        }
        /*
         * Note:
         * this doesn't have a check if prop & returntype of the function is the same,
         * because it can't be accessed at runtime
         */
        data_1.schemas.get(name)[key] = Object.assign(Object.assign(Object.assign({}, data_1.schemas.get(name)[key]), { type: Type }), rawOptions);
        return;
    }
    const ref = (_c = rawOptions) === null || _c === void 0 ? void 0 : _c.ref;
    // use "rawOptions.refType" if set, otherwise "Type" if it is an suitable ref-type, otherwise default back to "ObjectId"
    const refType = (_f = (_e = (_d = rawOptions) === null || _d === void 0 ? void 0 : _d.refType, (_e !== null && _e !== void 0 ? _e : (utils.isAnRefType(Type) ? Type : undefined))), (_f !== null && _f !== void 0 ? _f : mongoose.Schema.Types.ObjectId));
    if (!utils.isNullOrUndefined(ref)) {
        delete rawOptions.ref;
        const refName = typeof ref === 'string' ? ref : utils.getName(ref);
        switch (whatis) {
            case types_1.WhatIsIt.ARRAY:
                data_1.schemas.get(name)[key][0] = Object.assign(Object.assign(Object.assign({}, data_1.schemas.get(name)[key][0]), { type: refType, ref: refName }), rawOptions);
                break;
            case types_1.WhatIsIt.NONE:
                data_1.schemas.get(name)[key] = Object.assign(Object.assign(Object.assign({}, data_1.schemas.get(name)[key]), { type: refType, ref: refName }), rawOptions);
                break;
            default:
                throw new TypeError(util_1.format('"ref" is not supported for "%s"! (%s, %s)', whatis, utils.getName(target), key));
        }
        return;
    }
    const refPath = (_g = rawOptions) === null || _g === void 0 ? void 0 : _g.refPath;
    if (refPath) {
        if (typeof refPath !== 'string') {
            throw new TypeError(util_1.format('"refPath" for "%s, %s" should be of type String!', utils.getName(target), key));
        }
        delete rawOptions.refPath;
        switch (whatis) {
            case types_1.WhatIsIt.ARRAY:
                data_1.schemas.get(name)[key][0] = Object.assign(Object.assign(Object.assign({}, data_1.schemas.get(name)[key][0]), { type: refType, refPath }), rawOptions);
                break;
            case types_1.WhatIsIt.NONE:
                data_1.schemas.get(name)[key] = Object.assign(Object.assign(Object.assign({}, data_1.schemas.get(name)[key]), { type: refType, refPath }), rawOptions);
                break;
            default:
                throw new TypeError(util_1.format('"refPath" is not supported for "%s"! (%s, %s)', whatis, utils.getName(target), key));
        }
        return;
    }
    const enumOption = (_h = rawOptions) === null || _h === void 0 ? void 0 : _h.enum;
    if (!utils.isNullOrUndefined(enumOption)) {
        // check if the supplied value is already "mongoose-consumeable"
        if (!Array.isArray(enumOption)) {
            if (Type === String) {
                rawOptions.enum = Object.entries(enumOption) // get all key-value pairs of the enum
                    // no reverse-filtering because if it is full of strings, there is no reverse mapping
                    .map(([enumKey, enumValue]) => {
                    // safeguard, this should never happen because TypeScript only sets "design:type" to "String"
                    // if the enum is full of strings
                    if (typeof enumValue !== 'string') {
                        throw new errors_1.NotStringTypeError(name, key, enumKey, typeof enumValue);
                    }
                    return enumValue;
                });
            }
            else if (Type === Number) {
                rawOptions.enum = Object.entries(enumOption) // get all key-value pairs of the enum
                    // filter out the "reverse (value -> name) mappings"
                    // https://www.typescriptlang.org/docs/handbook/enums.html#reverse-mappings
                    .filter(([enumKey, enumValue], _i, arr) => {
                    // safeguard, this should never happen because typescript only sets "design:type" to "Number"
                    // if the enum is full of numbers
                    if (utils.isNullOrUndefined(enumValue) || arr.findIndex(([k]) => k === enumValue.toString()) <= -1) {
                        // if there is no reverse mapping, throw an error
                        throw new errors_1.NotNumberTypeError(name, key, enumKey, typeof enumValue);
                    }
                    return typeof enumValue === 'number';
                })
                    .map(([enumKey, enumValue]) => {
                    if (typeof enumValue !== 'number') {
                        throw new errors_1.NotNumberTypeError(name, key, enumKey, typeof enumValue);
                    }
                    return enumValue;
                });
            }
            else {
                // this will happen if the enum contains both types ("design:type" will be "Object")
                throw new Error(`Invalid type used for map!, got: "${Type}" (${name}.${key})`);
            }
        }
    }
    const selectOption = (_j = rawOptions) === null || _j === void 0 ? void 0 : _j.select;
    if (typeof selectOption === 'boolean') {
        data_1.schemas.get(name)[key] = Object.assign(Object.assign({}, data_1.schemas.get(name)[key]), { select: selectOption });
    }
    {
        // check if Type is actually a real working Type
        if (utils.isNullOrUndefined(Type) || typeof Type !== 'function') {
            throw new errors_1.InvalidTypeError(utils.getName(target), key, Type);
        }
        // check for validation inconsistencies
        if (utils.isWithStringValidate(rawOptions) && !utils.isString(Type)) {
            throw new errors_1.NotStringTypeError(name, key);
        }
        // check for transform inconsistencies
        if (utils.isWithStringTransform(rawOptions) && !utils.isString(Type)) {
            throw new errors_1.NotStringTypeError(name, key);
        }
        if (utils.isWithNumberValidate(rawOptions) && !utils.isNumber(Type)) {
            throw new errors_1.NotNumberTypeError(name, key);
        }
    }
    /** Is this Type (/Class) in the schemas Map? */
    const isInSchemas = data_1.schemas.has(utils.getName(Type));
    if (!isInSchemas && !utils.isPrimitive(Type) && !utils.isObject(Type)) {
        throw new errors_1.InvalidPropError(Type.name, key); // This seems to be never thrown!
    }
    if (utils.isPrimitive(Type)) {
        if (utils.isObject(Type, true)) {
            utils.warnMixed(target, key);
        }
        switch (whatis) {
            case types_1.WhatIsIt.ARRAY:
                data_1.schemas.get(name)[key] = Object.assign(Object.assign({}, data_1.schemas.get(name)[key][0]), utils.mapArrayOptions(rawOptions, Type, target, key));
                return;
            case types_1.WhatIsIt.MAP:
                const mapped = utils.mapOptions(rawOptions, Type, target, key, true);
                data_1.schemas.get(name)[key] = Object.assign(Object.assign(Object.assign({}, data_1.schemas.get(name)[key]), mapped.outer), { type: Map, of: Object.assign({ type: Type }, mapped.inner) });
                return;
            case types_1.WhatIsIt.NONE:
                data_1.schemas.get(name)[key] = Object.assign(Object.assign(Object.assign({}, data_1.schemas.get(name)[key]), rawOptions), { type: Type });
                return;
            default:
                throw new Error(`"${whatis}"(whatis(primitive)) is invalid for "${name}.${key}"`);
        }
    }
    // If the 'Type' is not a 'Primitive Type' and no subschema was found treat the type as 'Object'
    // so that mongoose can store it as nested document
    if (utils.isObject(Type) && !isInSchemas) {
        utils.warnMixed(target, key);
        data_1.schemas.get(name)[key] = Object.assign(Object.assign(Object.assign({}, data_1.schemas.get(name)[key]), rawOptions), { type: mongoose.Schema.Types.Mixed });
        return;
    }
    const virtualSchema = typegoose_1.buildSchema(Type);
    switch (whatis) {
        case types_1.WhatIsIt.ARRAY:
            data_1.schemas.get(name)[key] = Object.assign(Object.assign({}, data_1.schemas.get(name)[key][0]), utils.mapArrayOptions(rawOptions, virtualSchema, target, key, Type));
            return;
        case types_1.WhatIsIt.MAP:
            const mapped = utils.mapOptions(rawOptions, virtualSchema, target, key, false, Type);
            data_1.schemas.get(name)[key] = Object.assign(Object.assign(Object.assign({}, data_1.schemas.get(name)[key]), mapped.outer), { type: Map, of: Object.assign({ type: virtualSchema }, mapped.inner) });
            return;
        case types_1.WhatIsIt.NONE:
            data_1.schemas.get(name)[key] = Object.assign(Object.assign(Object.assign({}, data_1.schemas.get(name)[key]), rawOptions), { type: virtualSchema });
            return;
        default:
            throw new Error(`"${whatis}"(whatis(subSchema)) is invalid for "${name}.${key}"`);
    }
}
exports._buildPropMetadata = _buildPropMetadata;
/**
 * Set Property Options for the property below
 * @param options Options
 * @public
 */
function prop(options = {}) {
    return (target, key) => {
        const Type = Reflect.getMetadata(constants_1.DecoratorKeys.Type, target, key);
        if (utils.isNullOrUndefined(Type)) {
            throw new errors_1.NoMetadataError(key);
        }
        // soft errors
        {
            if ('items' in options) {
                logSettings_1.logger.warn('You might not want to use option "items" in a @prop, use @arrayProp (%s.%s)', utils.getName(target), key);
            }
            if ('of' in options) {
                logSettings_1.logger.warn('You might not want to use option "of" in a @prop, use @mapProp (%s.%s)', utils.getName(target), key);
            }
        }
        baseProp({
            Type,
            key,
            origOptions: options,
            target,
            whatis: types_1.WhatIsIt.NONE
        });
    };
}
exports.prop = prop;
/**
 * Set Property(that are Maps) Options for the property below
 * @param options Options for the Map
 * @public
 */
function mapProp(options) {
    return (target, key) => {
        var _a;
        const Type = (_a = options) === null || _a === void 0 ? void 0 : _a.of;
        delete options.of;
        if ('items' in options) {
            logSettings_1.logger.warn('You might not want to use option "items" in a @mapProp, use @arrayProp (%s.%s)', utils.getName(target), key);
        }
        baseProp({
            Type,
            key,
            origOptions: options,
            target,
            whatis: types_1.WhatIsIt.MAP
        });
    };
}
exports.mapProp = mapProp;
/**
 * Set Property(that are Arrays) Options for the property below
 * @param options Options
 * @public
 */
function arrayProp(options) {
    return (target, key) => {
        var _a;
        const Type = (_a = options) === null || _a === void 0 ? void 0 : _a.items;
        if ('of' in options) {
            logSettings_1.logger.warn('You might not want to use option "of" in a @arrayProp, use @mapProp (%s.%s)', utils.getName(target), key);
        }
        if ('items' in options) {
            delete options.items;
        }
        if ('itemsRef' in options) {
            options.ref = options.itemsRef;
            delete options.itemsRef;
        }
        if ('itemsRefPath' in options) {
            options.refPath = options.itemsRefPath;
            delete options.itemsRefPath;
        }
        if ('itemsRefType' in options) {
            options.refType = options.itemsRefType;
            delete options.itemsRefType;
        }
        baseProp({
            Type,
            key,
            origOptions: options,
            target,
            whatis: types_1.WhatIsIt.ARRAY
        });
    };
}
exports.arrayProp = arrayProp;
//# sourceMappingURL=data:application/json;base64,