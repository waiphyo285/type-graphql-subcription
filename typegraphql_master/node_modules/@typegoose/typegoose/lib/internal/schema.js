"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const mongoose = require("mongoose");
const logSettings_1 = require("../logSettings");
const prop_1 = require("../prop");
const constants_1 = require("./constants");
const data_1 = require("./data");
const errors_1 = require("./errors");
const utils_1 = require("./utils");
/**
 * Private schema builder out of class props
 * -> If you discover this, don't use this function, use Typegoose.buildSchema!
 * @param cl The not initialized Class
 * @param sch Already Existing Schema?
 * @param opt Options to override
 * @returns Returns the Build Schema
 * @private
 */
function _buildSchema(cl, sch, opt) {
    var _a, _b, _c;
    if (typeof cl !== 'function') {
        throw new errors_1.NoValidClass(cl);
    }
    utils_1.assignGlobalModelOptions(cl); // to ensure global options are applied to the current class
    // Options sanity check
    opt = utils_1.mergeSchemaOptions((utils_1.isNullOrUndefined(opt) || typeof opt !== 'object') ? {} : opt, cl);
    const name = utils_1.getName(cl);
    logSettings_1.logger.debug('_buildSchema Called for %s with options:', name, opt);
    /** Simplify the usage */
    const Schema = mongoose.Schema;
    const ropt = (_a = Reflect.getMetadata(constants_1.DecoratorKeys.ModelOptions, cl), (_a !== null && _a !== void 0 ? _a : {}));
    const schemaOptions = Object.assign((_c = (_b = ropt) === null || _b === void 0 ? void 0 : _b.schemaOptions, (_c !== null && _c !== void 0 ? _c : {})), opt);
    const decorators = Reflect.getMetadata(constants_1.DecoratorKeys.PropCache, cl.prototype);
    if (!utils_1.isNullOrUndefined(decorators)) {
        for (const decorator of decorators.values()) {
            prop_1._buildPropMetadata(decorator);
        }
    }
    if (!data_1.schemas.has(name)) {
        data_1.schemas.set(name, {});
    }
    if (!(sch instanceof Schema)) {
        sch = new Schema(data_1.schemas.get(name), schemaOptions);
    }
    else {
        sch = sch.clone();
        sch.add(data_1.schemas.get(name));
    }
    sch.loadClass(cl);
    if (data_1.hooks.has(name)) {
        const hook = data_1.hooks.get(name);
        hook.pre.forEach((obj) => sch.pre(obj.method, obj.func));
        hook.post.forEach((obj) => sch.post(obj.method, obj.func));
    }
    if (data_1.plugins.has(name)) {
        for (const plugin of data_1.plugins.get(name)) {
            logSettings_1.logger.debug('Applying Plugin:', plugin);
            sch.plugin(plugin.mongoosePlugin, plugin.options);
        }
    }
    /** Simplify the usage */
    if (data_1.virtuals.has(name)) {
        for (const [key, options] of data_1.virtuals.get(name)) {
            logSettings_1.logger.debug('Applying Virtual Populates:', key, options);
            sch.virtual(key, options);
        }
    }
    /** Get Metadata for indices */
    const indices = Reflect.getMetadata(constants_1.DecoratorKeys.Index, cl);
    if (Array.isArray(indices)) {
        for (const index of indices) {
            logSettings_1.logger.debug('Applying Index:', index);
            sch.index(index.fields, index.options);
        }
    }
    // this method is to get the typegoose name of the model/class if it is user-handled (like buildSchema, then manually mongoose.model)
    sch.method('typegooseName', () => {
        return name;
    });
    // add the class to the constructors map
    data_1.constructors.set(name, cl);
    return sch;
}
exports._buildSchema = _buildSchema;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2NoZW1hLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2ludGVybmFsL3NjaGVtYS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLHFDQUFxQztBQUVyQyxnREFBd0M7QUFDeEMsa0NBQTZDO0FBRTdDLDJDQUE0QztBQUM1QyxpQ0FBeUU7QUFDekUscUNBQXdDO0FBQ3hDLG1DQUFtRztBQUVuRzs7Ozs7Ozs7R0FRRztBQUNILFNBQWdCLFlBQVksQ0FDMUIsRUFBSyxFQUNMLEdBQXFCLEVBQ3JCLEdBQTRCOztJQUU1QixJQUFJLE9BQU8sRUFBRSxLQUFLLFVBQVUsRUFBRTtRQUM1QixNQUFNLElBQUkscUJBQVksQ0FBQyxFQUFFLENBQUMsQ0FBQztLQUM1QjtJQUVELGdDQUF3QixDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsNERBQTREO0lBRTFGLHVCQUF1QjtJQUN2QixHQUFHLEdBQUcsMEJBQWtCLENBQUMsQ0FBQyx5QkFBaUIsQ0FBQyxHQUFHLENBQUMsSUFBSSxPQUFPLEdBQUcsS0FBSyxRQUFRLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxHQUFHLEVBQUUsRUFBRSxDQUFDLENBQUM7SUFFN0YsTUFBTSxJQUFJLEdBQUcsZUFBTyxDQUFDLEVBQUUsQ0FBQyxDQUFDO0lBRXpCLG9CQUFNLENBQUMsS0FBSyxDQUFDLDBDQUEwQyxFQUFFLElBQUksRUFBRSxHQUFHLENBQUMsQ0FBQztJQUVwRSx5QkFBeUI7SUFDekIsTUFBTSxNQUFNLEdBQUcsUUFBUSxDQUFDLE1BQU0sQ0FBQztJQUMvQixNQUFNLElBQUksU0FBa0IsT0FBTyxDQUFDLFdBQVcsQ0FBQyx5QkFBYSxDQUFDLFlBQVksRUFBRSxFQUFFLENBQUMsdUNBQUksRUFBRSxFQUFBLENBQUM7SUFDdEYsTUFBTSxhQUFhLEdBQUcsTUFBTSxDQUFDLE1BQU0sYUFBQyxJQUFJLDBDQUFFLGFBQWEsdUNBQUksRUFBRSxJQUFFLEdBQUcsQ0FB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